# Este archivo contiene asignaciones de pines comunes para la placa BIGTREETECH SKR mini
# E3 v2.0.

[include fluidd.cfg]
[virtual_sdcard]
path: /home/linux/printer_data/gcodes

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_30FFD5053041543212792143-if00

#https://docs.fluidd.xyz/features/sensors
[temperature_sensor SKR_E3_V2_Fuzion3d]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

[temperature_sensor Servidor_Fuzion3d]
sensor_type: temperature_host
min_temp: 10
max_temp: 100


[pause_resume]


#[bltouch]
#sensor_pin: ^PC14
#control_pin: PA1
#x_offset: -35
#y_offset: -0
#z_offset: 0

samples: 2
speed: 2
sample_retract_dist: 2.0
lift_speed: 7
samples_result: average
samples_tolerance: 0.100
samples_tolerance_retries: 0

[gcode_macro BLTOUCH_DEPLOY]
#description: "Baja el pin del BLTouch"
gcode:
    BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro BLTOUCH_RETRACT]
#description: "Sube el pin del BLTouch"
gcode:
    BLTOUCH_DEBUG COMMAND=pin_up




[bed_mesh]
speed: 80
horizontal_move_z: 5
mesh_min: 10,10        # Comienza desde un margen seguro
mesh_max: 200,220      # Limita X a 149 para excluir 71 mm del lado derecho
probe_count: 5,5
algorithm: bicubic
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0


[safe_z_home]
home_xy_position: 140,110  # Centro ajustado
speed: 200 
z_hop: 10
z_hop_speed: 5

[gcode_macro M600]
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    M300 P50 S784 
    M300 P50 S784  
    M300 P10 S0    
    M300 P50 S784
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state



[bed_screws]
screw1:  23, 35
screw2: 192, 35
screw3: 192, 209
screw4: 23, 209


[stepper_x]
step_pin: PB13  # Pin que controla los pasos del motor en el eje X
dir_pin: !PB12   # Pin que define la dirección del motor, invertido (!)
enable_pin: !PB14   # Pin para habilitar o deshabilitar el motor, invertido (!)
microsteps: 16      # El motor hará 16 micro-pasos por cada paso completo
rotation_distance: 40   # El motor moverá 40 mm por cada rotación completa
endstop_pin: ^PC0     # Pin para el sensor de fin de carrera del eje X, con resistencia pull-up (^)
position_endstop: 0     # Posición en mm cuando el endstop del eje X está activado (posición de origen)
position_max: 235     # Máxima distancia en mm que puede moverse el eje X desde el origen
homing_speed: 50      # Velocidad de movimiento en mm/s cuando realiza el homing en el eje X

[tmc2209 stepper_x]
uart_pin: PC11       # Pin UART para la comunicación con el driver TMC2209
tx_pin: PC10         # Pin TX para enviar datos al driver TMC2209
uart_address: 0      # Dirección UART del driver en el eje X (normalmente 0)
run_current: 0.580   # Corriente del motor durante el funcionamiento, en amperios (0.580A)
stealthchop_threshold: 999999     # Umbral de velocidad para activar StealthChop (número alto para usar siempre)

[stepper_y]
step_pin: PB10              # Pin que controla los pasos del motor en el eje Y
dir_pin: !PB2               # Pin que define la dirección del motor, invertido (!)
enable_pin: !PB11           # Pin para habilitar o deshabilitar el motor, invertido (!)
microsteps: 16              # El motor hará 16 micro-pasos por cada paso completo
rotation_distance: 40       # El motor moverá 40 mm por cada rotación completa
endstop_pin: ^PC1           # Pin para el sensor de fin de carrera del eje Y, con resistencia pull-up (^)
position_endstop: 0         # Posición en mm cuando el endstop del eje Y está activado (posición de origen)
position_max: 235           # Máxima distancia en mm que puede moverse el eje Y desde el origen
homing_speed: 50            # Velocidad de movimiento en mm/s cuando realiza el homing en el eje Y


[tmc2209 stepper_y]
uart_pin: PC11                 # Pin UART para la comunicación con el driver TMC2209 en el eje Y
tx_pin: PC10                   # Pin TX para enviar datos al driver TMC2209 en el eje Y
uart_address: 2                # Dirección UART del driver en el eje Y (normalmente 2 si tienes múltiples drivers)
run_current: 0.580             # Corriente del motor durante el funcionamiento, en amperios (0.580A)
stealthchop_threshold: 999999  # Umbral de velocidad para activar StealthChop (número alto para usar siempre)


[stepper_z]
step_pin: PB0               # Pin que controla los pasos del motor en el eje Z
dir_pin: PC5                # Pin que define la dirección del motor en el eje Z
enable_pin: !PB1            # Pin para habilitar o deshabilitar el motor, invertido (!)
microsteps: 16              # El motor hará 16 micro-pasos por cada paso completo
rotation_distance: 8        # El motor mueve 8 mm por cada rotación completa
[stepper_z]
endstop_pin:PC2         # Pin que detecta el fin de carrera (endstop) del eje Z
#endstop_pin:probe:z_virtual_endstop
#position_endstop: 0         # Posición en mm cuando el endstop del eje Z está activado (posición de origen)
position_max: 250           # Máxima distancia en mm que puede moverse el eje Z desde el origen
position_min: -6.0


[tmc2209 stepper_z]
uart_pin: PC11                 # Pin UART para la comunicación con el driver TMC2209 en el eje Z
tx_pin: PC10                   # Pin TX para enviar datos al driver TMC2209 en el eje Z
uart_address: 1                # Dirección UART del driver en el eje Z (normalmente 1 si es el segundo driver)
run_current: 0.580             # Corriente del motor durante el funcionamiento, en amperios (0.580A)
stealthchop_threshold: 999999  # Umbral de velocidad para activar StealthChop (número alto para que esté siempre activo)


[extruder]
step_pin: PB3                      # Pin que controla los pasos del motor del extrusor
dir_pin: !PB4                      # Pin que controla la dirección del motor del extrusor (invertido con `!`)
enable_pin: !PD2                   # Pin que habilita o deshabilita el motor del extrusor, invertido
microsteps: 16                     # El motor del extrusor realiza 16 micro-pasos por cada paso completo
rotation_distance: 22.980           # Distancia recorrida por una rotación completa del extrusor (en mm de filamento)
nozzle_diameter: 0.400             # Diámetro de la boquilla de extrusión, en mm
filament_diameter: 1.750           # Diámetro del filamento utilizado, en mm
heater_pin: PC8                    # Pin que controla el calentador del extrusor
sensor_type: EPCOS 100K B57560G104F # Tipo de sensor de temperatura del extrusor (termistor EPCOS 100K)
sensor_pin: PA0                    # Pin al que está conectado el sensor de temperatura del extrusor
#control: pid                       # Método de control de temperatura (PID en este caso)
#pid_Kp: 21.527                     # Valor proporcional del control PID
#pid_Ki: 1.063                      # Valor integral del control PID
#pid_Kd: 108.982                    # Valor derivativo del control PID
min_temp: 0                        # Temperatura mínima de seguridad para el extrusor
max_temp: 250                      # Temperatura máxima de seguridad para el extrusor
max_extrude_only_distance: 80



[tmc2209 extruder]
uart_pin: PC11                   # Pin UART para la comunicación con el driver TMC2209 en el extrusor
tx_pin: PC10                     # Pin TX para enviar datos al driver TMC2209 en el extrusor
uart_address: 3                  # Dirección UART del driver del extrusor (usualmente 3 si es el cuarto motor)
run_current: 0.650               # Corriente de funcionamiento del extrusor, en amperios (0.650A)
stealthchop_threshold: 999999    # Umbral de velocidad para activar StealthChop, configurado alto para que siempre esté activo


[heater_bed]
heater_pin: PC9                          # Pin que controla el calentador de la cama
sensor_type: ATC Semitec 104GT-2          # Tipo de sensor de temperatura utilizado para la cama
sensor_pin: PC3                           # Pin al que está conectado el sensor de temperatura de la cama
control: pid                               # Método de control de temperatura (PID)
pid_Kp: 54.027                             # Valor proporcional del control PID
pid_Ki: 0.770                              # Valor integral del control PID
pid_Kd: 948.182                            # Valor derivativo del control PID
min_temp: 0                                # Temperatura mínima de seguridad para la cama
max_temp: 130                              # Temperatura máxima de seguridad para la cama


[gcode_macro HOME]
gcode:
    G28 ; Realiza el homing
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0  ; Desactiva el motor X
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0  ; Desactiva el motor Y
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0  ; Desactiva el motor Z

[gcode_macro HOME_AND_DISABLE]
gcode:
    G28  # Hacer homing
    G1 Z30 F300  # Elevar el cabezal 30 mm a una velocidad de 300 mm/min
    M84  # Desactivar todos los motores
    





[heater_fan heatbreak_cooling_fan]
pin: PC7                        # Pin que controla el ventilador de enfriamiento del heatbreak


[fan]
pin: PC6                          # Pin que controla el ventilador de refrigeración general


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_30FFD5053041543212792143-if00   # Ruta del dispositivo serial de la MCU




[printer]
kinematics:cartesian
max_velocity: 1000
max_accel: 10000
max_z_velocity: 30
max_z_accel: 200
square_corner_velocity: 5.0

#[printer]
#kinematics: cartesian               # Tipo de cinemática del sistema de impresión
#max_velocity: 500                   # Velocidad máxima de movimiento en mm/s
#max_accel: 1000                     # Aceleración máxima en mm/s²
#max_z_velocity: 30                  # Velocidad máxima de movimiento en el eje Z en mm/s
#max_z_accel: 150                    # Aceleración máxima en el eje Z en mm/s²


[static_digital_output usb_pullup_enable]
pins: !PA14                            # Pin que se utilizará para habilitar o deshabilitar la resistencia pull-up USB


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

[display]
lcd_type: st7920                       # Tipo de pantalla LCD utilizado
cs_pin: EXP1_7                         # Pin de selección de chip (CS) para la pantalla
sclk_pin: EXP1_6                       # Pin de reloj (SCLK) para la pantalla
sid_pin: EXP1_8                        # Pin de datos en serie (SID) para la pantalla
encoder_pins: ^EXP1_5, ^EXP1_3         # Pines del codificador rotativo para el control del menú
click_pin: ^!EXP1_2                    # Pin de clic para el codificador (botón)




[pwm_cycle_time BEEPER_pin]
pin: EXP1_1
value: 0
shutdown_value: 0
cycle_time: 0.001
#   Frecuencia PWM predeterminada : 0.001 = 1ms dará un tono de 1kHz
#   Aunque no es perfecto en tono.



[gcode_macro M300]
gcode: 
    {% set S = params.S|default(1000)|int %}          # Establece el parámetro S, que controla la frecuencia del sonido (en Hz), predeterminado a 1000 Hz.
    {% set P = params.P|default(100)|int %}            # Establece el parámetro P, que controla la duración del sonido (en milisegundos), predeterminado a 100 ms.
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }  # Activa el pin del zumbador con un valor de 0.5 y un tiempo de ciclo determinado por S.
    G4 P{P}                                          # Espera durante el tiempo especificado por P.
    SET_PIN PIN=BEEPER_pin VALUE=0                    # Desactiva el pin del zumbador.






#TONOS

[gcode_macro Mario]
gcode:
      M300 P50 S784 
      M300 P50 S784  
      M300 P10 S0    
      M300 P50 S784
      M300 P10 S0
      M300 P50 S659
      M300 P50 S784
      M300 P10 S0
      M300 P50 S988


